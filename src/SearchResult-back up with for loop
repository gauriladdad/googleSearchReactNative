
class SearchResult extends Component {

	constructor(props) {
		super(props);
		console.log("creating search results: " + props.result.url);
	}

	render() {
		return (
			
			<View style={styles.rowContainer}>
						<View sytle={styles.textContainer}>
							<Text style={styles.title} numberofLines={1}>
								{this.props.result.url}
							</Text>
							<Text style={styles.title} numberofLines={2}>
								{this.props.result.titleNoFormatting}
							</Text>	
						</View>		
			</View>);
	}

	rowPressed(url) {
	  	IntentAndroid.openURL(url);
	}
}
////////

class SearchPage extends Component {
	constructor(props) {
		super(props);

		this.state = {
			searchString: 'london',
			isLoading: true,
			message: '',
			resultCount: 0,
			resultResponse: {}
		};
	}


	render() {
		var searchResult = this.state.resultCount > 0 ? 
			this.renderResults()
		: 
			(<View/>);

		return (
			<View style={styles.container}>
				<View style={styles.flowRight}>
					<TextInput 
						style={styles.searchInput}
						value={this.state.searchString}
						onChange={this.onSearchTextChanged.bind(this)}
						placeholder='Search Google or type URL'/>
					<TouchableHighlight style={styles.button}
						underlayColor='#99d9f4'>
						<Text style={styles.buttonText}
						onPress={this.onSearchPressed.bind(this)}>
							Go
						</Text>			
					</TouchableHighlight>	
				</View>

				<Text style={styles.truncate} numberOfLines={1}>
					GIGIJASDGJAHSDKJAHDKJAHSDKJAHSDKAJHSDKAJDHSKAJSD AKSHDKJADHASKJDH
					ASJDHAKSDJHAKJSDH AKJSHDKASDHKAJSDH KAJSHDKAJDSH
				</Text>
				
				<TouchableHighlight style={styles.button}
					underlayColor='#99d9f4'
					onPress={this.onLocationPressed.bind(this)}>
					<Text style={styles.buttonText}>Location</Text>
				</TouchableHighlight>	

				<SearchResults/>

			</View>

			
		);
	}

	renderResults() {
		var daysItems = [];

	    for (var i=0; i < this.state.resultResponse.length ; i++) {
	            daysItems.push(
	                <SearchResult key={i} result={this.state.resultResponse[i]}/> 
	            )
	        } 
        
        return daysItems;  
	}

	onLocationPressed() {
		
	}

	onSearchTextChanged(event) {
		this.setState({ searchString: event.nativeEvent.text });

		console.log("event.nativeEvent.text: " + event.nativeEvent.text);
		console.log("this.state.searchString: " + this.state.searchString);
	}


	_executeQuery(query) {
		console.log(query);
		this.setState({isLoading: true});
		fetch(query)
			.then(response => console.log("results: " + response.json().results))
			//.then(response => response.json())
			//.then(json => this._handleResponse(json.response))
			.catch(error => 
				this.setState({
					isLoading: false,
					message: 'Something bad happened ' + error	
			}));
	}

	_handleResponse(searchResult) {
		this.setState({ isLoading: false, message: ''});

		if(searchResult.responseStatus === 200) {
			console.log("json: "+ searchResult.responseData.results);

			searchResult.responseData.results.map(function(object, i){
        			console.log("result number: " + i);
        			console.log("object: " + object.url);
    			});
			this.setState({resultResponse : searchResult.responseData.results});
			this.setState({resultCount : searchResult.responseData.results.length});
			
		}
		else {
			this.setState({ message: 'Location not recognized, please try again'});
		}
	}

	onSearchPressed() {
		var query = urlForQueryAndPage(this.state.searchString);
		fetch(query)
		/*.then(response => { 
			console.log(response.json()); 
			var data = response._bodyInit;
			console.log("responseData: " + data["responseData"]);
		})*/
		.then(response => response.json())
		.then(json => { 
			this._handleResponse(json);
		})
      	//.then(response => console.log(response))
      	//.then(response => console.log("I am json: " + response.json()))
     	.catch(error => console.log("error: " + error));
	}
}